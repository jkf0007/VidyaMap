var VizWidth = document.getElementById("background").offsetWidth, VizHeight = document
        .getElementById("background").offsetHeight;

var color = d3.scale.category20();

var center = 0; // center node index, randomly set to 4
var clickedNodePos = {
    x : 500,
    y : 500
};
var tmpOffset = {
    x : 500,
    y : 500
}; // temporary offset set at the clicked node position. It moves towards the
    // offset with each tick. This is just to make the center node movement
    // smooth.
var offset = VizWidth / 2; // x,y offset of the center node from svg container
                            // 0,0
var noOfLevelsToBeDisplayed = 4;
var first = 1;

var l1EdgeLength = 110;
var l1Tol1EdgeLength = 150;
var l1Tol2EdgeLength = 150;
var defaultEdgeLength = 90;

// size of nodes
var centerNodeWidth = 100;
var l1NodeWidth = 85;
var centerNodeHeight = 100;
var l1NodeHeight = 30;
var l2NodeSize = 100;
// for circle nodes
var centerNodeSize = 100;
var l1NodeSize = 100;
var l2NodeSize = 100;

// fisheye
var fishEyeScaleFactor = 22;
var fishEyeDistortionFactor = 2;
var fishEyeRadius = 200;

var clicked = 0;

var restUrl = '/VidyaMap/r/search/'

var force =
// cola.d3adaptor()
d3.layout.force().linkDistance(function(d) {
    if (d.source.level == 0 || d.target.level == 0)
        return l1EdgeLength; // root to level 1 connection
    else if (d.source.level <= 1 && d.target.level <= 1)
        return l1Tol1EdgeLength; // level 1 to level 1 connection
    else if (d.source.level <= 1 || d.target.level <= 1)
        return l1Tol2EdgeLength; // level 1 to level 2 connection
    else
        return defaultEdgeLength;
}).linkStrength(function(d) {
    // if(d.source.name=="photosynthesis" && d.target.name=="water&nutrients")
    // return 0;
    if (d.source.level == 0 || d.target.level == 0)
        return 0.3;
    else if (d.source.level <= 1 && d.target.level <= 1)
        return 0.3;
    else if (d.source.level <= 1 || d.target.level <= 1)
        return 0.3;
    else
        return 0.1;
}).charge(function(d) {
    if (d.level == 0)
        return -200;
    else if (d.level == 1)
        return -200;
    else if (d.level == 2)
        return -200;
    else
        return -20;
}).gravity(0).theta(1).friction(.95).size([ VizWidth, VizHeight ]);

var svg = d3.select("div.background").append("svg").attr("width", "100%").attr(
        "height", "100%");
// .style("background-color", "#999");

// fisheye

var fisheye = d3.fisheye.circular().radius(fishEyeRadius).distortion(
        fishEyeDistortionFactor);

// Adi start
function getentity(s) {
    var nodevalue = s.innerHTML;

    jQuery.ajax({
        url : restUrl,
        type : 'POST',
        async : false,
        data : nodevalue,
        contentType : 'application/json; charset=utf-8',
        dataType : 'json',
        success : function(jsonData) {
            createFDR(jsonData);
        },
        failure : function(emsg) {
            alert("Error:::" + emsg);
        }
    });
}

function sendRequest(search) {
    /*if (event.keyCode == 13) {
        var text = search.value;
        jQuery.ajax({
            url : restUrl,
            type : 'POST',
            data : text,
            contentType : 'application/json; charset=utf-8',
            dataType : 'json',
            async : false,
            success : function(jsonData) {
                createFDR(jsonData);
            },
            failure : function(emsg) {
                alert("Error:::" + emsg);
            }
        });
    }*/
}
/*
 * svg.on("mousemove", function() {
 * 
 * center_node_x = node[0][center].__data__.x? node[0][center].__data__.x:0 ;
 * center_node_y = node[0][center].__data__.y? node[0][center].__data__.x:0;
 * 
 * //fisheye.focus(d3.mouse(this));
 * 
 * });
 */

var node, link;

function createFDR(graph) {
	d3.select("svg").remove();
	svg = d3.select("div.background").append("svg").attr("width", "100%").attr(
        "height", "100%");
   
    var nodeMap = {};
    graph.nodes.forEach(function(x) {
        nodeMap[x.id] = x;
    });
    graph.links = graph.links.map(function(x) {
        return {
            source : nodeMap[x.source],
            target : nodeMap[x.target],
            value : x.value,
            info : x.info
        };
    });

    force.nodes(graph.nodes).links(graph.links).start();

    setTimeout(function() {
        first = 0;
        click(node[0][center].__data__,0);
        force.start();
    }, 2000);

    node = svg.selectAll(".node").data(graph.nodes);

    node.exit().remove();

    var nodeEnter = node.enter().append("g").attr("class", "node").on("click",
            click);
    // .call(force.drag);

    nodeEnter.append("rect").attr("class", "node").attr("width", function(d) {
        if (d.level == 0)
            return centerNodeWidth;
        else
            return l1NodeWidth;
    }).attr("height", function(d) {
        if (d.level == 0)
            return centerNodeHeight;
        else
            return l1NodeHeight;
    }).style("fill", function(d) {
        return color(1);
    }).style("visibility", function(d) {
        return d.level > 2 ? "hidden" : "visible";
    });

    nodeEnter.append("text")
    // .attr("dy", 20)
    .text(function(d) {
        return d.name;
    });

    node.append("title").text(function(d) {
        return d.name;
    });

    link = svg.selectAll(".link").data(graph.links);

    link.exit().remove();

    linkEnter = link.enter().append("g").attr("class", "link");

    link = linkEnter
            .append("line")
            .attr("class", "link")
            .on("click", clickLink)
            .call(force.drag)
            .style("stroke-width", function(d) {
                return (d.target.group == 12 || d.source.group == 12) ? 4 : 1;
            })
            .style(
                    "visibility",
                    function(d) {
                        return (d.source.level > 2 || d.target.level > 2) ? "hidden"
                                : "visible";
                    });

    linkEnter.append("text").attr("class", "linklabel").text(function(d) {
        return (d.info);
    }).attr("x", function(d) {
        return (d.source.y + d.target.y) / 2;
    }).attr("y", function(d) {
        return (d.source.x + d.target.x) / 2;
    }).attr("text-anchor", "middle").attr("fill", "black");

    createAdjacencyList();
    // remove nodes with no connections; make their level==5
    for (i = 0; i < node.size(); i++) {
        if (adjacencyList[i].size == 0) {
            // make the corresponding index as zero
            node[0][center].__data__.level = 5;
        }
    }

    findSectorAngles(center);

    force
            .on(
                    "tick",
                    function(e) {
                        tickCount++;
                        if (tickCount == 100) {
                            // if(clicked==1) enforceSectorConstraint();
                            d3.select(node[0][center]).classed("fixed",
                                    node[0][center].__data__.fixed = false);
                            for (i = 0; i < adjacencyList[center].size; i++) {
                                curL1NodeIndex = adjacencyList[center].connections[i].node_index;
                                d3
                                        .select(node[0][curL1NodeIndex])
                                        .classed(
                                                "fixed",
                                                node[0][curL1NodeIndex].__data__.fixed = false);
                            }
                        }

                        center_node_x = (node[0][center].__data__.x ? node[0][center].__data__.x
                                : 0);
                        center_node_y = (node[0][center].__data__.y ? node[0][center].__data__.y
                                : 0);

                        // calculate tmpOffset position
                        if (tickCount < 200) {
                            tmpOffset.x -= (clickedNodePos.x - offset) / 100;
                            tmpOffset.y -= (clickedNodePos.y - offset) / 100;
                        }

                        node.each(function(d) {
                            d.x = d.x - center_node_x + tmpOffset.x;
                            d.y = d.y - center_node_y + tmpOffset.y;
                        });

                        // update node positions and size after fisheye
                        // modification
                        fisheye.focus([ center_node_x, center_node_y ]);

                        node.each(function(d) {
                            d.fisheye = fisheye(d);
                        });

                        node.selectAll("rect").attr("width", function(d) {
                            return d.fisheye.z * l1NodeWidth;
                        }).attr("height", function(d) {
                            return d.fisheye.z * l1NodeHeight;
                        });

                        /*
                         * node.selectAll("circle") .attr("r", function(d) {
                         * return d.fisheye.z * fishEyeScaleFactor; });
                         */

                        if (tickCount > 0) {
                            node.selectAll("rect").style(
                                    "visibility",
                                    function(d) {
                                        return d.level > 2 ? "hidden"
                                                : "visible";
                                    });
                            // Display nodes and links
                            node
                                    .attr(
                                            "transform",
                                            function(d) {
                                                return "translate("
                                                        + (d.fisheye.x - (d.fisheye.z * l1NodeWidth) / 2)
                                                        + ","
                                                        + (d.fisheye.y - (d.fisheye.z * l1NodeHeight) / 2)
                                                        + ")";
                                            });
                            node.selectAll("text").attr(
                                    "transform",
                                    function(d) {
                                        return "translate("
                                                + (d.fisheye.z * l1NodeWidth)
                                                / 2 + ","
                                                + (d.fisheye.z * l1NodeHeight)
                                                / 2 + ")";
                                    }).style("font-size", function(d) {
                                if (d.level == 0)
                                    return "25px";
                                else
                                    "10px"
                            }).style("font-style", function(d) {
                                if (d.level == 0)
                                    return "italic";
                                else
                                    "normal"
                            })

                            link
                                    .attr(
                                            "x1",
                                            function(d) {
                                                var width = d.source.fisheye.z
                                                        * l1NodeWidth;
                                                var height = d.source.fisheye.z
                                                        * l1NodeHeight;
                                                var boxAngle = getAngle(width,
                                                        height);
                                                var edgeAngle = getAngle(
                                                        d.target.fisheye.x
                                                                - d.source.fisheye.x,
                                                        d.source.fisheye.y
                                                                - d.target.fisheye.y);
                                                // console.log(d.source.name +
                                                // "( " + d.source.x + "," +
                                                // d.source.y + ") , " +
                                                // d.target.name + "( " +
                                                // d.target.x + "," + d.target.y
                                                // + "); Angle: " +
                                                // edgeAngle*180/Math.PI );
                                                var x1, y1, x2, y2;
                                                var signFactorY = (edgeAngle < Math.PI) ? 1
                                                        : -1;
                                                var signFactorX = (edgeAngle < Math.PI / 2 || edgeAngle > 3 * Math.PI / 2) ? 1
                                                        : -1;
                                                if ((edgeAngle > boxAngle && edgeAngle < Math.PI
                                                        - boxAngle)
                                                        || (edgeAngle > Math.PI
                                                                + boxAngle && edgeAngle < 2
                                                                * Math.PI
                                                                - boxAngle)) {
                                                    y1 = height / 2;
                                                    x1 = Math
                                                            .abs(y1
                                                                    / Math
                                                                            .tan(edgeAngle));
                                                } else {
                                                    x1 = width / 2;
                                                    y1 = Math
                                                            .abs(x1
                                                                    * Math
                                                                            .tan(edgeAngle));
                                                }

                                                return d.source.fisheye.x
                                                        + signFactorX * x1;
                                            })
                                    .attr(
                                            "y1",
                                            function(d) {
                                                var width = d.source.fisheye.z
                                                        * l1NodeWidth;
                                                var height = d.source.fisheye.z
                                                        * l1NodeHeight;
                                                var boxAngle = getAngle(width,
                                                        height);
                                                var edgeAngle = getAngle(
                                                        d.target.fisheye.x
                                                                - d.source.fisheye.x,
                                                        d.source.fisheye.y
                                                                - d.target.fisheye.y);
                                                var x1, y1, x2, y2;
                                                var signFactorY = (edgeAngle < Math.PI) ? 1
                                                        : -1;
                                                var signFactorX = (edgeAngle < Math.PI / 2 || edgeAngle > 3 * Math.PI / 2) ? 1
                                                        : -1;
                                                if ((edgeAngle > boxAngle && edgeAngle < Math.PI
                                                        - boxAngle)
                                                        || (edgeAngle > Math.PI
                                                                + boxAngle && edgeAngle < 2
                                                                * Math.PI
                                                                - boxAngle)) {
                                                    y1 = height / 2;
                                                    x1 = Math
                                                            .abs(y1
                                                                    / Math
                                                                            .tan(edgeAngle));
                                                } else {
                                                    x1 = width / 2;
                                                    y1 = Math
                                                            .abs(x1
                                                                    * Math
                                                                            .tan(edgeAngle));
                                                }

                                                return d.source.fisheye.y
                                                        - signFactorY * y1;
                                            })
                                    .attr(
                                            "x2",
                                            function(d) {
                                                var width = d.target.fisheye.z
                                                        * l1NodeWidth;
                                                var height = d.target.fisheye.z
                                                        * l1NodeHeight;
                                                var boxAngle = getAngle(width,
                                                        height);
                                                var edgeAngle = getAngle(
                                                        d.target.fisheye.x
                                                                - d.source.fisheye.x,
                                                        d.source.fisheye.y
                                                                - d.target.fisheye.y);
                                                var x1, y1, x2, y2;
                                                var signFactorY = (edgeAngle < Math.PI) ? 1
                                                        : -1;
                                                var signFactorX = (edgeAngle < Math.PI / 2 || edgeAngle > 3 * Math.PI / 2) ? 1
                                                        : -1;
                                                if ((edgeAngle > boxAngle && edgeAngle < Math.PI
                                                        - boxAngle)
                                                        || (edgeAngle > Math.PI
                                                                + boxAngle && edgeAngle < 2
                                                                * Math.PI
                                                                - boxAngle)) {
                                                    y1 = height / 2;
                                                    x1 = Math
                                                            .abs(y1
                                                                    / Math
                                                                            .tan(edgeAngle));
                                                } else {
                                                    x1 = width / 2;
                                                    y1 = Math
                                                            .abs(x1
                                                                    * Math
                                                                            .tan(edgeAngle));
                                                }

                                                return d.target.fisheye.x
                                                        - signFactorX * x1;
                                            })
                                    .attr(
                                            "y2",
                                            function(d) {
                                                var width = d.target.fisheye.z
                                                        * l1NodeWidth;
                                                var height = d.target.fisheye.z
                                                        * l1NodeHeight;
                                                var boxAngle = getAngle(width,
                                                        height);
                                                // var edgeAngle =
                                                // getAngle(d.target.fisheye.x-d.source.fisheye.x,
                                                // d.target.fisheye.y-d.source.fisheye.y);
                                                var edgeAngle = getAngle(
                                                        d.target.fisheye.x
                                                                - d.source.fisheye.x,
                                                        d.source.fisheye.y
                                                                - d.target.fisheye.y);
                                                var x1, y1, x2, y2;
                                                var signFactorY = (edgeAngle < Math.PI) ? 1
                                                        : -1;
                                                var signFactorX = (edgeAngle < Math.PI / 2 || edgeAngle > 3 * Math.PI / 2) ? 1
                                                        : -1;
                                                if ((edgeAngle > boxAngle && edgeAngle < Math.PI
                                                        - boxAngle)
                                                        || (edgeAngle > Math.PI
                                                                + boxAngle && edgeAngle < 2
                                                                * Math.PI
                                                                - boxAngle)) {
                                                    y1 = height / 2;
                                                    x1 = Math
                                                            .abs(y1
                                                                    / Math
                                                                            .tan(edgeAngle));
                                                } else {
                                                    x1 = width / 2;
                                                    y1 = Math
                                                            .abs(x1
                                                                    * Math
                                                                            .tan(edgeAngle));
                                                }

                                                return d.target.fisheye.y
                                                        + signFactorY * y1;
                                            });

                            link
                                    .selectAll("text")
                                    .attr(
                                            "x",
                                            function(d) {
                                                return (d.source.fisheye.x + d.target.fisheye.x) / 2;
                                            })
                                    .attr(
                                            "y",
                                            function(d) {
                                                return (d.source.fisheye.y + d.target.fisheye.y) / 2;
                                            }).attr("text-anchor", "middle")
                                    .attr("fill", function(d) {
                                        return "black"
                                    });
                        }
                    });
}

var tickCount = 0;

function clickLink(d, i) {
    if (d3.event.defaultPrevented)
        return; // ignore drag
    // console.log(d3.event);
    console.log(i + "; mouse position: " + (d3.mouse(this))[0]);
    d3.select("#tooltip").style("left", (d3.mouse(this))[0]).style("top",
            (d3.mouse(this))[1]).style("position", "absolute").select("#value")
            .text("hello");

    // Show the tooltip
    d3.select("#tooltip").classed("hidden", false);
}

function click(d, i) {
    // if (d3.event.defaultPrevented) return; // ignore drag
    // console.log(d3.event);
    // console.log(i);
    clicked = 1;
    tickCount = 0;
    center = i;
    clickedNodePos = {
        x : node[0][i].__data__.x,
        y : node[0][i].__data__.y
    };
    tmpOffset = clickedNodePos;
    updateNodeLevels(center);
    groupL1Nodes(center);
    // seedInitialPlacementofL1Nodes(center);
    // findSectorAngles(center);
    // enforceSectorConstraint(); // keep each element within its sector
    // boundary;
    // force.on();
    changeCenterNodeDisplay();
    // display content
    //d3.select("div.textField").text(node[0][center].__data__.text);
    jQuery("#textDivField").html(node[0][center].__data__.text);


    force.start();
    force.start();
    force.start();
}

// return angle from origin in the range of 0 - 360
function getAngle(x, y) {
    var theta = Math.atan2(y, x);
    if (theta < 0)
        return 2 * Math.PI + theta;
    return theta;
}

// rotates a point at x,y to a new location with angle theta with origin and
// radial distance same as that of x,y
function rotate(x, y, theta) {
    var newTheta = getAngle(x, y) + theta;

    var radialDistance = Math.sqrt(x * x + y * y);
    var newX = radialDistance * Math.cos(newTheta);
    var newY = radialDistance * Math.sin(newTheta);
    return {
        x : newX,
        y : newY
    };
}

var L1GroupSectorRange = []; // contains the theta range for this group of
                                // nodes
L1GroupSectorRange[0] = 0;

function findSectorAngles(center) {
    var L1GroupFrequency = []; // contains the number of nodes in the
                                // corresponding group number. Group number
                                // starts with 1;
    L1GroupFrequency[0] = 0;
    // find the number of nodes in each group
    for (var i = 0; i < adjacencyList[center].size; i++) {
        curL1NodeIndex = adjacencyList[center].connections[i].node_index;
        groupNumber = node[0][curL1NodeIndex].__data__.L1Group;
        if (L1GroupFrequency[groupNumber])
            L1GroupFrequency[groupNumber]++;
        else
            L1GroupFrequency[groupNumber] = 1;
    }

    // calculate the angle range each group needs.
    var thetaPerNode = (2 * Math.PI / adjacencyList[center].size);
    for (var i = 1; i <= adjacencyList[center].size; i++) {
        L1GroupSectorRange[i] = L1GroupSectorRange[i - 1] + thetaPerNode
                * L1GroupFrequency[i];
    }

}

// checks if the current co-ordinate is in the specified quadrant; if not bring
// it to the specified co-ordinate;
function enforceSectorConstraint() {
    // enforce placement in correct sector for every node
    // run through the adjacency list and enforce its quadrant placement;
    var L1GroupRotateByTheta = [];
    L1GroupRotateByTheta[0] = 0;
    for (i = 0; i < adjacencyList[center].size; i++) {
        curL1NodeIndex = adjacencyList[center].connections[i].node_index;
        groupNumber = node[0][curL1NodeIndex].__data__.L1Group;

        // get angle w.r.t center
        L1GroupRotateByTheta[groupNumber] = getRequiredRotationTheta(
                curL1NodeIndex, groupNumber);
    }

    for (i = 0; i < node.size(); i++) {
        if (i != center) {
            groupNumber = node[0][i].__data__.L1Group;
            var newCoordinates = rotateWRTCenter(i,
                    L1GroupRotateByTheta[groupNumber]);
            node[0][i].__data__.x = newCoordinates.x;
            node[0][i].__data__.y = newCoordinates.y;
        }
    }

}

function rotateWRTCenter(nodeIndex, theta) {
    var xWRTCenter = node[0][nodeIndex].__data__.x - node[0][center].__data__.x;
    var yWRTCenter = node[0][nodeIndex].__data__.y - node[0][center].__data__.y;

    var new_xyWRTCenter = rotate(xWRTCenter, yWRTCenter, theta);

    x_standard = node[0][center].__data__.x + new_xyWRTCenter.x;
    y_standard = node[0][center].__data__.y + new_xyWRTCenter.y;

    return {
        x : x_standard,
        y : y_standard
    };
}

function getRequiredRotationTheta(nodeIndex, groupNumber) {
    var xWRTCenter = node[0][nodeIndex].__data__.x - node[0][center].__data__.x;
    var yWRTCenter = node[0][nodeIndex].__data__.y - node[0][center].__data__.y;

    var currentAngle = getAngle(xWRTCenter, yWRTCenter);

    theta1 = L1GroupSectorRange[groupNumber - 1];
    theta2 = L1GroupSectorRange[groupNumber];

    if (currentAngle < theta1)
        return theta1 - currentAngle;
    else if (currentAngle > theta2)
        return 2 * Math.PI - (currentAngle - theta2);
    else
        return 0;

}

function seedInitialPlacementofL1Nodes(center) {
    // find the number of groups
    var i;
    noOfGroups = 0;
    for (i = 0; i < adjacencyList[center].size; i++) {
        curL1NodeIndex = adjacencyList[center].connections[i].node_index;
        if (node[0][curL1NodeIndex].__data__.L1Group > noOfGroups) {
            noOfGroups = node[0][curL1NodeIndex].__data__.L1Group;
        }
    }
    console.log("max no. of groups= " + noOfGroups);

    // place each group elements together;
    nodeNumber = 0;
    theta = 2 * Math.PI / adjacencyList[center].size;
    d3.select(node[0][center]).classed("fixed",
            node[0][center].__data__.fixed = true);
    for (i = 1; i <= noOfGroups; i++) {
        for (var j = 0; j < adjacencyList[center].size; j++) {
            curL1NodeIndex = adjacencyList[center].connections[j].node_index;
            groupNumber = node[0][curL1NodeIndex].__data__.L1Group;
            if (groupNumber == i) {
                node[0][curL1NodeIndex].__data__.x = node[0][center].__data__.x
                        + L1EdgeLength * Math.cos(nodeNumber * theta);
                node[0][curL1NodeIndex].__data__.y = node[0][center].__data__.y
                        + L1EdgeLength * Math.sin(nodeNumber * theta);
                nodeNumber++;
                d3.select(node[0][curL1NodeIndex]).classed("fixed",
                        node[0][curL1NodeIndex].__data__.fixed = true);
            }
        }
    }
}

function changeCenterNodeDisplay() {

    node.selectAll("rect").attr("class", "node").attr("width", function(d) {
        if (d.level == 0)
            return centerNodeWidth;
        else
            return l1NodeWidth;
    }).attr("height", function(d) {
        if (d.level == 0)
            return centerNodeWidth;
        else
            return l1NodeWidth;
    }).style("fill", function(d) {
        if (d.level == 0)
            return "#FF0000";
        else if (d.level == 1)
            return color(1);
        else
            return color(10);
    });

    /*
     * node.selectAll("circle") .attr("class", "node") .attr("r", function(d)
     * {if(d.level==0) return centerNodeSize; else return l1NodeSize;})
     * .style("fill", function(d) {if(d.level==0) return "#FF0000"; else
     * if(d.level==1) return color(1); else return color(10); });
     */

    node.selectAll("text")
    // .attr("dy", function(d){if(d.level==0) return 30; else return 20;})
    .attr("text-anchor", "middle").attr("text-align", "center").style(
            "visibility", function(d) {
                return d.level > 2 ? "hidden" : "visible";
            }).text(function(d) {
        return d.name;
    });

    link = svg.selectAll(".link").attr("class", "link").style("stroke-width",
            function(d) {
                if (d.target.level == 0 || d.source.level == 0)
                    return 4;
                else
                    return 1;
            }).style("stroke", function(d) {
        if (d.target.level == 0 || d.source.level == 0)
            return "#f09000";
        else
            return "#999";
    }).style(
            "visibility",
            function(d) {
                return (d.source.level > 2 || d.target.level > 2) ? "hidden"
                        : "visible";
            }).style("fill", function(d) {
        if (d.target.level == 0 || d.source.level == 0)
            return "black";
        else
            return "#000";
    });

    link.selectAll("text")
    // .attr("dy", function(d){if(d.level==0) return 30; else return 20;})
    .style("stroke", "none").style("-webkit-transform", "rotate(90deg)");
}

var adjacencyList = [];
// create adjacency list of the current graph
function createAdjacencyList() {
    for (i = 0; i < node.size(); i++) {
        node_name = node[0][i].__data__.name;
        adjacencyList[i] = {
            name : node_name,
            size : 0,
            connections : []
        };
    }

    // loop through all the edges and fill out adjacency list.
    for (i = 0; i < link.size(); i++) {
        source_index = link[0][i].__data__.source.index;
        target_index = link[0][i].__data__.target.index;

        var size = adjacencyList[source_index].size;
        adjacencyList[source_index].connections[size] = {
            node_index : link[0][i].__data__.target.index,
            type : "out"
        };
        adjacencyList[source_index].size = adjacencyList[source_index].size + 1;

        var size = adjacencyList[target_index].size;
        adjacencyList[target_index].connections[size] = {
            node_index : link[0][i].__data__.source.index,
            type : "in"
        };
        adjacencyList[target_index].size = adjacencyList[target_index].size + 1;
    }

}

function groupL1Nodes(center) {
    var i;
    // initialization; Assign each L1 node to group 0
    for (i = 0; i < node.size(); i++) {
        node[0][i].__data__.L1Group = 0;
    }

    var groupNumber = 0;
    // loop through each node and label same group number to the nodes which are connected to each other (howsoever)
    for (i = 0; i < adjacencyList[center].size; i++) {
        curL1NodeIndex = adjacencyList[center].connections[i].node_index;
        if (node[0][curL1NodeIndex].__data__.L1Group == 0) {
            groupNumber++;
            //run BFS and assign group number; BFS here is not implemented via stack, so is not optimal. 
            //Although since we have only two level of nodes, I believe it should not be an issue. 
            //In case of performance issues later, it should be changed
            findConnectivityUsingBFS(curL1NodeIndex, groupNumber); //finds all the nodes connected to node i (level 1 or beyond) and assign them the same group number
        }
    }
    return groupNumber;
}

function findConnectivityUsingBFS(nodeIndex, groupNumber) {
    var i;
    node[0][nodeIndex].__data__.L1Group = groupNumber;
    for (i = 0; i < adjacencyList[nodeIndex].size; i++) {
        curNodeIndex = adjacencyList[nodeIndex].connections[i].node_index;
        if (node[0][curNodeIndex].__data__.level != 0
                && node[0][curNodeIndex].__data__.L1Group == 0) {
            //node[0][curNodeIndex].__data__.L1Group = groupNumber;
            findConnectivityUsingBFS(curNodeIndex, groupNumber);
        }
    }
}

function updateNodeLevels(center) {
    var i, j;
    var initialLevel = 25000;
    // initialize
    for (i = 0; i < node.size(); i++) {
        node[0][i].__data__.level = initialLevel;
    }

    // set the centre node;
    node[0][center].__data__.level = 0;

    // set levels of nodes; Naive; Could implement BFS if data structure changes.
    var curLevel;
    for (curLevel = 0; curLevel < noOfLevelsToBeDisplayed; curLevel++) {
        for (j = 0; j < link.size(); j++) {
            if (link[0][j].__data__.source.level == curLevel
                    && link[0][j].__data__.target.level == initialLevel) {
                link[0][j].__data__.target.level = curLevel + 1;
            } else if (link[0][j].__data__.target.level == curLevel
                    && link[0][j].__data__.source.level == initialLevel) {
                link[0][j].__data__.source.level = curLevel + 1;
            }
        }
    }

    //print adjacencyList
    groupL1Nodes(center);
    for (i = 0; i < adjacencyList.length; i++) {
        console
                .log("Connection List of node: " + adjacencyList[i].name
                        + "=> ");
        for (var j = 0; j < adjacencyList[i].size; j++) {
            console
                    .log("\t"
                            + adjacencyList[i].connections[j].node_index
                            + ", "
                            + adjacencyList[adjacencyList[i].connections[j].node_index].name
                            + ", type: " + adjacencyList[i].connections[j].type

                    );
        }
    }
    //debug; print values
    for (i = 0; i < node.size(); i++) {
        console.log("name,level: " + node[0][i].__data__.name + ", "
                + node[0][i].__data__.level + ", L1Group: "
                + node[0][i].__data__.L1Group);
    }

}
